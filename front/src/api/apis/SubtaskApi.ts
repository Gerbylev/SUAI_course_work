/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSubtaskData,
  SubtaskData,
} from '../models/index';
import {
    CreateSubtaskDataFromJSON,
    CreateSubtaskDataToJSON,
    SubtaskDataFromJSON,
    SubtaskDataToJSON,
} from '../models/index';

export interface AddSubtaskRequest {
    taskId: string;
    createSubtaskData: CreateSubtaskData;
}

export interface DeleteSubtaskRequest {
    taskId: string;
    subtaskId?: number;
}

export interface EditSubtaskRequest {
    taskId: string;
    subtaskData: SubtaskData;
}

export interface GetSubtaskRequest {
    taskId: string;
}

/**
 * 
 */
export class SubtaskApi extends runtime.BaseAPI {

    /**
     */
    async addSubtaskRaw(requestParameters: AddSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubtaskData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling addSubtask().'
            );
        }

        if (requestParameters['createSubtaskData'] == null) {
            throw new runtime.RequiredError(
                'createSubtaskData',
                'Required parameter "createSubtaskData" was null or undefined when calling addSubtask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subtask/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubtaskDataToJSON(requestParameters['createSubtaskData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubtaskDataFromJSON));
    }

    /**
     */
    async addSubtask(requestParameters: AddSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubtaskData>> {
        const response = await this.addSubtaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSubtaskRaw(requestParameters: DeleteSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubtaskData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling deleteSubtask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['subtaskId'] != null) {
            queryParameters['subtaskId'] = requestParameters['subtaskId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subtask/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubtaskDataFromJSON));
    }

    /**
     */
    async deleteSubtask(requestParameters: DeleteSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubtaskData>> {
        const response = await this.deleteSubtaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async editSubtaskRaw(requestParameters: EditSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubtaskData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling editSubtask().'
            );
        }

        if (requestParameters['subtaskData'] == null) {
            throw new runtime.RequiredError(
                'subtaskData',
                'Required parameter "subtaskData" was null or undefined when calling editSubtask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subtask/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubtaskDataToJSON(requestParameters['subtaskData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubtaskDataFromJSON));
    }

    /**
     */
    async editSubtask(requestParameters: EditSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubtaskData>> {
        const response = await this.editSubtaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubtaskRaw(requestParameters: GetSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubtaskData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getSubtask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/subtask/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubtaskDataFromJSON));
    }

    /**
     */
    async getSubtask(requestParameters: GetSubtaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubtaskData>> {
        const response = await this.getSubtaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
