/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SolutionData,
  SolutionsData,
} from '../models/index';
import {
    SolutionDataFromJSON,
    SolutionDataToJSON,
    SolutionsDataFromJSON,
    SolutionsDataToJSON,
} from '../models/index';

export interface AddSolutionRequest {
    taskId: string;
    notebooks?: Array<Blob>;
}

export interface GetSolutionRequest {
    taskId: string;
    solutionId?: number;
}

export interface GetSolutionsRequest {
    taskId: string;
}

/**
 * 
 */
export class SolutionApi extends runtime.BaseAPI {

    /**
     */
    async addSolutionRaw(requestParameters: AddSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolutionData>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling addSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['notebooks'] != null) {
            requestParameters['notebooks'].forEach((element) => {
                formParams.append('notebooks', element as any);
            })
        }

        const response = await this.request({
            path: `/api/solution/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolutionDataFromJSON(jsonValue));
    }

    /**
     */
    async addSolution(requestParameters: AddSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolutionData> {
        const response = await this.addSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSolutionRaw(requestParameters: GetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolutionData>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getSolution().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['solutionId'] != null) {
            queryParameters['solutionId'] = requestParameters['solutionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solution/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolutionDataFromJSON(jsonValue));
    }

    /**
     */
    async getSolution(requestParameters: GetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolutionData> {
        const response = await this.getSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSolutionsRaw(requestParameters: GetSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SolutionsData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getSolutions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solutions/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SolutionsDataFromJSON));
    }

    /**
     */
    async getSolutions(requestParameters: GetSolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SolutionsData>> {
        const response = await this.getSolutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
