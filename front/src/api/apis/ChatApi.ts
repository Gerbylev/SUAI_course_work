/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatData,
  ChatsData,
  PromptData,
} from '../models/index';
import {
    ChatDataFromJSON,
    ChatDataToJSON,
    ChatsDataFromJSON,
    ChatsDataToJSON,
    PromptDataFromJSON,
    PromptDataToJSON,
} from '../models/index';

export interface ChatRequest {
    taskId: string;
    chatId: string;
    promptData: PromptData;
}

export interface CreateChatsRequest {
    taskId: string;
}

export interface GetChatRequest {
    taskId: string;
    chatId: string;
}

export interface GetChatsRequest {
    taskId: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     */
    async chatRaw(requestParameters: ChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling chat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling chat().'
            );
        }

        if (requestParameters['promptData'] == null) {
            throw new runtime.RequiredError(
                'promptData',
                'Required parameter "promptData" was null or undefined when calling chat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solution/{taskId}/chat/{chatId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))).replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptDataToJSON(requestParameters['promptData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatDataFromJSON));
    }

    /**
     */
    async chat(requestParameters: ChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatData>> {
        const response = await this.chatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createChatsRaw(requestParameters: CreateChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatData>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling createChats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solution/{taskId}/chat`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatDataFromJSON(jsonValue));
    }

    /**
     */
    async createChats(requestParameters: CreateChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatData> {
        const response = await this.createChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChatRaw(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getChat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solution/{taskId}/chat/{chatId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))).replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatDataFromJSON));
    }

    /**
     */
    async getChat(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatData>> {
        const response = await this.getChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChatsRaw(requestParameters: GetChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatsData>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getChats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/solution/{taskId}/chat`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatsDataFromJSON));
    }

    /**
     */
    async getChats(requestParameters: GetChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatsData>> {
        const response = await this.getChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
