/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginData,
  RegisterData,
  TokenData,
} from '../models/index';
import {
    LoginDataFromJSON,
    LoginDataToJSON,
    RegisterDataFromJSON,
    RegisterDataToJSON,
    TokenDataFromJSON,
    TokenDataToJSON,
} from '../models/index';

export interface LoginUserRequest {
    loginData: LoginData;
}

export interface RegisterUserRequest {
    registerData: RegisterData;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Позволяет пользователю войти в систему.
     * Логин пользователя
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenData>> {
        if (requestParameters['loginData'] == null) {
            throw new runtime.RequiredError(
                'loginData',
                'Required parameter "loginData" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDataToJSON(requestParameters['loginData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDataFromJSON(jsonValue));
    }

    /**
     * Позволяет пользователю войти в систему.
     * Логин пользователя
     */
    async loginUser(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenData> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Позволяет зарегистрировать нового пользователя.
     * Регистрация нового пользователя
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registerData'] == null) {
            throw new runtime.RequiredError(
                'registerData',
                'Required parameter "registerData" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDataToJSON(requestParameters['registerData']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Позволяет зарегистрировать нового пользователя.
     * Регистрация нового пользователя
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerUserRaw(requestParameters, initOverrides);
    }

}
