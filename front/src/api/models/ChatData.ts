/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageData } from './MessageData';
import {
    MessageDataFromJSON,
    MessageDataFromJSONTyped,
    MessageDataToJSON,
    MessageDataToJSONTyped,
} from './MessageData';

/**
 * 
 * @export
 * @interface ChatData
 */
export interface ChatData {
    /**
     * 
     * @type {string}
     * @memberof ChatData
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatData
     */
    summary?: string;
    /**
     * 
     * @type {Array<MessageData>}
     * @memberof ChatData
     */
    messages?: Array<MessageData>;
}

/**
 * Check if a given object implements the ChatData interface.
 */
export function instanceOfChatData(value: object): value is ChatData {
    return true;
}

export function ChatDataFromJSON(json: any): ChatData {
    return ChatDataFromJSONTyped(json, false);
}

export function ChatDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatData {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(MessageDataFromJSON)),
    };
}

export function ChatDataToJSON(json: any): ChatData {
    return ChatDataToJSONTyped(json, false);
}

export function ChatDataToJSONTyped(value?: ChatData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'summary': value['summary'],
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(MessageDataToJSON)),
    };
}

