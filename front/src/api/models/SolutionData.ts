/* tslint:disable */
/* eslint-disable */
/**
 * Контракт для ОП
 * API для работы с заданиями и тетрадками для нашего маленького (пока ещё!) подобия Stepik. Здесь находится наш скромный функционал, выраженный в возможности создать новые задания, получить всю возможную информацию об уже имеющемся задании по его идентификатору, а также тут происходит связь \"учитель - студент\", когда ученик высылает своё решение (также по идентификатору).
 *
 * The version of the OpenAPI document: Pre-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentData } from './CommentData';
import {
    CommentDataFromJSON,
    CommentDataFromJSONTyped,
    CommentDataToJSON,
    CommentDataToJSONTyped,
} from './CommentData';

/**
 * 
 * @export
 * @interface SolutionData
 */
export interface SolutionData {
    /**
     * 
     * @type {string}
     * @memberof SolutionData
     */
    status?: string;
    /**
     * 
     * @type {Array<CommentData>}
     * @memberof SolutionData
     */
    comments?: Array<CommentData>;
}

/**
 * Check if a given object implements the SolutionData interface.
 */
export function instanceOfSolutionData(value: object): value is SolutionData {
    return true;
}

export function SolutionDataFromJSON(json: any): SolutionData {
    return SolutionDataFromJSONTyped(json, false);
}

export function SolutionDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolutionData {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'comments': json['comments'] == null ? undefined : ((json['comments'] as Array<any>).map(CommentDataFromJSON)),
    };
}

export function SolutionDataToJSON(json: any): SolutionData {
    return SolutionDataToJSONTyped(json, false);
}

export function SolutionDataToJSONTyped(value?: SolutionData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'comments': value['comments'] == null ? undefined : ((value['comments'] as Array<any>).map(CommentDataToJSON)),
    };
}

